modelVersion: 2.0

docker-images:
  - adp-release-auto: armdocker.rnd.ericsson.se/sandbox/adp-staging/adp-cicd/bob-adp-release-auto:latest
  - adp-helm-dr-check: armdocker.rnd.ericsson.se/sandbox/adp-staging/adp-cicd/common-library-adp-helm-dr-check:latest
  - py3-kube-helm: armdocker.rnd.ericsson.se/sandbox/adp-staging/adp-cicd/bob-py3kubehelmbuilder:1.15.2-8
  - doc-builder: armdocker.rnd.ericsson.se/sandbox/adp-staging/adp-cicd/bob-docbuilder:2.3.0-6
  - adp-maven-builder: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/bob-javamvnbuilder.minideb:latest
  - grype-scan: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/va-image-scanning-grype:latest
  - trivy-inline-scan: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/trivy-inline-scan

properties:
  - helm-chart-repo: https://arm.epk.ericsson.se/artifactory/list/proj-adp-oss-graph-database-nj-helm/
  - helm-chart-repo-subpath: snapshots
  - helm-destination-folder: Helm/eric-data-graph-database-nj
  - helm-chart-name: eric-data-graph-database-nj
  - image-registry: armdocker.rnd.ericsson.se
  - image-drop-repopath: aia_snapshots/graphdb-n4j
  - image-full-name: ${image-registry}/${image-drop-repopath}
  - bragent-image-full-name: ${image-registry}/proj-enm/backup-restore-agent
  - bragent-version: 2.0.51-2
  - bro-version: 10.0.0+26
  - enm-snapshot-repopath: proj_oss_releases
  - service-migration-full-name: ${image-registry}/${enm-snapshot-repopath}/neo4j-service-migration
  - self-monitoring-full-name: ${image-registry}/${enm-snapshot-repopath}/self-monitoring
  - bro-helm-repo: https://arm.rnd.ki.sw.ericsson.se/artifactory/proj-adp-gs-all-helm/
  - bro-chart-name: eric-ctrl-bro

env:
  - PWD (default=$PWD)
  - RELEASE (default=false)
  - PRODUCTION_DATE (default = $(date -u +%FT%TZ))
  - IMAGE_REPOPATH_INTERNAL (default=aia_snapshots)
  - KUBECONFIG (default=/tmp/kube.admin.conf)
  - HELM_REPO_API_TOKEN (default=AKCp2WY1HSJFJs1KHqVYtnadmQFw7k3A7JtcW4E9zKXKBRskkM7ZnTUQCfr9FvCp3mFattM8K)
  - ISO_VERSION (default=2.10.13)
  - BUILD_DATE (default = $(date -u +%d%m%Y-%H%M%S))


var:
  - version
  - image-full-name-internal
  - commit-hash
  - version-prefix
  - rstate

rules:

  clean:
    - task: helm-clean
      cmd:
        - rm -rf ${helm-destination-folder}

  lint:
    - task: helm-lint
      docker-image: adp-release-auto
      cmd: helm lint ${helm-destination-folder}
    - task: markdownlint
      docker-image: doc-builder
      cmd: markdownlint --config /etc/markdownlint-cli/adp.yaml $(git ls-files -- \*\.md | cat | xargs)
    - task: vale
      docker-image: doc-builder
      cmd: vale --output line --no-wrap $(git ls-files -- \*\.md | cat | xargs)

  image:
    - task: version
      docker-image: adp-release-auto
      cmd: generate-version --is-release ${env.RELEASE} --output version
    - task: generate-rstate
      docker-image: adp-release-auto
      cmd: get_rstate.py ${var.version} > .bob/var.rstate
    - task: get-commit-hash
      docker-image: adp-release-auto
      cmd: git rev-parse HEAD > .bob/var.commit-hash
    - task: image-full-name-internal
      docker-image: adp-release-auto
      cmd: echo "${image-registry}/${image-drop-repopath}" > .bob/var.image-full-name-internal
    - task: docker-build
      cmd: docker build ${env.PWD}
        --file Docker/Dockerfile
        --tag ${var.image-full-name-internal}:${var.version}
        --build-arg GIT_COMMIT=${var.commit-hash}
        --build-arg BUILD_DATE=${env.BUILD_DATE}
        --build-arg IMAGE_BUILD_VERSION=${var.version}
        --build-arg ISO_VERSION=${env.ISO_VERSION}
        --build-arg RSTATE=${var.rstate}
    - task: extract-bragent
      cmd: docker run --name extract
          --rm ${bragent-image-full-name}:${bragent-version}
          cat /opt/ericsson/backup-restore-agent/bragent > ${env.PWD}/bragent/bragent.extracted || exit $?;
          chmod u+x ${env.PWD}/bragent/bragent.extracted
    - task: docker-build-bragent
      cmd: cat ${env.PWD}/bragent/bragent.Dockerfile |
           awk '{
             gsub("\\$GRAPHDB_REPO_PATH", "${var.image-full-name-internal}");
             gsub("\\$GRAPHDB_TAG", "${var.version}");
             print}' > ${env.PWD}/bragent/tmp.Dockerfile ;
          cat ${env.PWD}/bragent/tmp.Dockerfile;
           docker build ${env.PWD}/bragent
           --file bragent/tmp.Dockerfile
           --tag ${var.image-full-name-internal}-bragent:${var.version}
           --build-arg GIT_COMMIT=${var.commit-hash}
           --build-arg BUILD_DATE=${env.BUILD_DATE}
           --build-arg IMAGE_BUILD_VERSION=${var.version}
           --build-arg ISO_VERSION=${env.ISO_VERSION}
           --build-arg RSTATE=${var.rstate}
    - task: docker-build self-monitoring
      cmd: docker build ${env.PWD}/self-monitoring
        --file self-monitoring/Dockerfile
        --tag ${self-monitoring-full-name}:${var.version}
        --build-arg GIT_COMMIT=${var.commit-hash}
        --build-arg BUILD_DATE=${env.BUILD_DATE}
        --build-arg IMAGE_BUILD_VERSION=${var.version}
        --build-arg ISO_VERSION=${env.ISO_VERSION}
        --build-arg RSTATE=${var.rstate}
    - task: docker-build service-migration-job
      cmd: docker build ${env.PWD}/service-migration-job
           --file service-migration-job/Dockerfile
           --tag ${service-migration-full-name}:${var.version}
           --build-arg GIT_COMMIT=${var.commit-hash}
           --build-arg BUILD_DATE=${env.BUILD_DATE}
           --build-arg IMAGE_BUILD_VERSION=${var.version}
           --build-arg ISO_VERSION=${env.ISO_VERSION}
           --build-arg RSTATE=${var.rstate}
    - task: helm-package
      docker-image: adp-release-auto
      cmd: helm-package
           --folder ${helm-destination-folder}
           --workdir .bob --output ${helm-chart-name}
           --version ${var.version}
           --replace VERSION=${var.version} --replace PRODUCTION_DATE=${env.PRODUCTION_DATE} --replace BRAGENT_TAG=${bragent-version} --replace ENM_REPOPATH=${enm-snapshot-repopath}

  check-helm-dr:
    - task: helm-chart-check
      docker-image: adp-helm-dr-check
      cmd: helm-dr-check -DhelmDesignRule.config.drHc144=skip -DhelmDesignRule.config.DR-D1121-121=skip -DhelmDesignRule.config.DR-D1123-121=skip -DhelmDesignRule.config.DR-D1121-120=skip -DhelmDesignRule.config.DR-D1121-064=skip -DhelmDesignRule.config.drHc062=skip -DhelmDesignRule.config.drD470202010A=skip --helm-chart ${helm-destination-folder} --output .bob/

  push:
    - task: image-push
      cmd: docker push ${var.image-full-name-internal}:${var.version}
    - task: bragent-image-push
      cmd: docker push ${var.image-full-name-internal}-bragent:${var.version}
    - task: self-monitoring-image-push
      cmd: docker push ${self-monitoring-full-name}:${var.version}
    - task: service-migration-image-push
      cmd: docker push ${service-migration-full-name}:${var.version}
    - task: helm-upload
      docker-image: adp-release-auto
      cmd:
        - upload_file.sh --filename=${helm-chart-name}/${helm-chart-name}-${var.version}.tgz --repository=${helm-chart-repo}${helm-chart-repo-subpath}/${helm-chart-name} --api-token=${env.HELM_REPO_API_TOKEN}

  remove-images:
    - task: remove-images
      cmd:
        - docker image remove ${var.image-full-name-internal}:${var.version}
        - docker image remove ${var.image-full-name-internal}-bragent:${var.version}
        - docker image remove ${self-monitoring-full-name}:${var.version}
        - docker image remove ${service-migration-full-name}:${var.version}

  build-bragent-replica-sync:
    - task: build-jar
      docker-image: adp-maven-builder
      cmd: mvn package
        --file "${env.PWD}/bragent/pom.xml"
        --quiet

  test-deployment:
    - task: test-deployment
      docker-image: py3-kube-helm
      docker-flags:
        - "--env KUBECONFIG=/tmp/kube.admin.conf"
        - "--env HELM_HOME=/home/helmuser/.helm"
        - "--volume ${env.KUBECONFIG}:/tmp/kube.admin.conf:ro"
        - "--volume ${env.PWD}:${env.PWD}"
      cmd: python -u testframework/bootstrap.py --kubernetes-admin-conf="${env.KUBECONFIG}"
                                                --chart-archive="/tmp/${helm-chart-name}-${var.version}".tgz
                                                --helm-repo="${helm-chart-repo}"
                                                --baseline_chart_version="${var.version}"
                                                --baseline_deployment_type="deployment"
                                                --baseline_chart_name="${helm-chart-name}"
                                                --test-params unused1=1
                                                --fail-first=True
                                                -s test_graphdb.py

  grype-scan:
    - task: fetch-image
      cmd:
        - "docker pull ${var.image-full-name-internal}:${var.version}"
        - "docker pull ${var.image-full-name-internal}-bragent:${var.version}"
        - "docker pull ${self-monitoring-full-name}:${var.version}"
        - "docker pull ${service-migration-full-name}:${var.version}"
        - mkdir -p build/va-reports/anchore-reports
    - task: grype-scan-graphdb
      docker-image: grype-scan
      docker-in-docker: socket
      cmd: grype_scan --image ${var.image-full-name-internal}:${var.version}
                      --image ${var.image-full-name-internal}-bragent:${var.version}
                      --image ${self-monitoring-full-name}:${var.version}
                      --image ${service-migration-full-name}:${var.version}
                      --report-dir build/va-reports/anchore-reports

  trivy-inline-scan:
    - task: create-trivy-scan-reports-directory
      cmd:
        - "docker pull ${var.image-full-name-internal}:${var.version}"
        - "docker pull ${var.image-full-name-internal}-bragent:${var.version}"
        - "docker pull ${self-monitoring-full-name}:${var.version}"
        - "docker pull ${service-migration-full-name}:${var.version}"
        - mkdir -p build/va-reports/trivy-reports
    # print result to console
    - task: trivy-inline-scan-graphdb-console-report
      docker-image: trivy-inline-scan
      docker-in-docker: socket
      cmd: --offline-scan --timeout 30m ${var.image-full-name-internal}:${var.version} 2>&1 | tee build/va-reports/trivy-reports/graphdb.trivy.console.summary.txt
    - task: trivy-inline-scan-bragent-console-report
      docker-image: trivy-inline-scan
      docker-in-docker: socket
      cmd: --offline-scan --timeout 30m ${var.image-full-name-internal}-bragent:${var.version} 2>&1 | tee build/va-reports/trivy-reports/bragent.trivy.console.summary.txt
    - task: trivy-inline-scan-self-monitoring-console-report
      docker-image: trivy-inline-scan
      docker-in-docker: socket
      cmd: --offline-scan --timeout 30m ${self-monitoring-full-name}:${var.version} 2>&1 | tee build/va-reports/trivy-reports/self.monitoring.trivy.console.summary.txt
    - task: trivy-inline-scan-service-migration-console-report
      docker-image: trivy-inline-scan
      docker-in-docker: socket
      cmd: --offline-scan --timeout 30m ${service-migration-full-name}:${var.version} 2>&1 | tee build/va-reports/trivy-reports/service.migration.trivy.console.summary.txt
    # save result to json
    - task: trivy-inline-scan-graphdb-json-report
      docker-image: trivy-inline-scan
      docker-in-docker: socket
      cmd: --format json --output build/va-reports/trivy-reports/graphdb.trivy.report.json --offline-scan --timeout 30m ${var.image-full-name-internal}:${var.version}
    - task: trivy-inline-scan-bragent-json-report
      docker-image: trivy-inline-scan
      docker-in-docker: socket
      cmd: --format json --output build/va-reports/trivy-reports/bragent.trivy.report.json --offline-scan --timeout 30m ${var.image-full-name-internal}-bragent:${var.version}
    - task: trivy-inline-scan-self-monitoring-json-report
      docker-image: trivy-inline-scan
      docker-in-docker: socket
      cmd: --format json --output build/va-reports/trivy-reports/self.monitoring.trivy.report.json --offline-scan --timeout 30m ${self-monitoring-full-name}:${var.version}
    - task: trivy-inline-scan-service-migration-json-report
      docker-image: trivy-inline-scan
      docker-in-docker: socket
      cmd: --format json --output build/va-reports/trivy-reports/service.migration.trivy.report.json --offline-scan --timeout 30m ${service-migration-full-name}:${var.version}

  fetch-xray-report:
    - task: create-xray-reports-directory
      cmd:
        - mkdir -p build/va-reports/xray-reports
    - task: fetch-graphdb-xray-report
      docker-image: adp-release-auto
      cmd: bash -c 'fetch-xray
          --debug
          --user lciadm100
          --apikey ${env.HELM_REPO_API_TOKEN}
          --config ci-config/xray_report.config
          --output build/va-reports/xray-reports/graphdb.xray_report.json
          --set version=${var.version}'

  generate-VA-report:
    - task: generate-graphDB-VA-report
      docker-image: adp-release-auto
      cmd: "bash -c 'va-report
           --set version=${var.version}
           --set image-full-name-internal=${var.image-full-name-internal}
           --set self-monitoring-full-name=${self-monitoring-full-name}
           --set service-migration-full-name=${service-migration-full-name}
           --config ci-config/va-report.config
           --md 
           --debug
           --output build/va-reports/Vulnerability_Report.md
           --xray-report build/va-reports/xray-reports/
           --anchore-reports build/va-reports/anchore-reports
           --trivy-reports build/va-reports/trivy-reports'
          EXITCODE=$?;
          if [ $EXITCODE -eq 10 ]; then EXITCODE=0; fi;
          exit $EXITCODE"
    - task: va-report-to-html
      docker-image: adp-release-auto
      cmd: bash -c 'if [ -f "build/va-reports/Vulnerability_Report.md" ];
           then
             doc-handler generate
             --config ci-config/va_html_config.yaml
             --output build/html
             --format html;
           else
             echo "The Vulnerability_Report.md file does not exist in the workspace to generate the HTML report.";
           fi'

  bur-test:
    - task: bur-test
      docker-image: py3-kube-helm
      docker-flags:
        - "--env KUBECONFIG=/tmp/kube.admin.conf"
        - "--env HELM_HOME=/home/helmuser/.helm"
        - "--volume ${env.KUBECONFIG}:/tmp/kube.admin.conf:ro"
        - "--volume ${env.PWD}:${env.PWD}"
      cmd: python -u testframework/bootstrap.py --kubernetes-admin-conf="${env.KUBECONFIG}"
                                                --chart-archive="/tmp/${helm-chart-name}-${var.version}".tgz
                                                --helm-repo="${helm-chart-repo}"
                                                --baseline_chart_version="${var.version}"
                                                --baseline_deployment_type="deployment"
                                                --baseline_chart_name="${helm-chart-name}"
                                                --test-params bro-version=${bro-version} bro-helm-repo=${bro-helm-repo} bro-chart-name=${bro-chart-name}
                                                --fail-first=True
                                                --output-html="bur_test_output.html"
                                                -s test_bur.py
